# This starter workflow helps you send a trace of any build step to Honeycomb. It works
# with a free Honeycomb account, which includes ample usage to support large scale
# buildevents use cases.
#
# To get started:
# 1. Visit the Honeycomb Sign Up Page and create an account.
# 2. Name your team (any name will do: for example, company name).
# 3. Copy your API key.
# 4. Create a GitHub Action Secret with this API key named "BUILDEVENT_APIKEY"
#
# For more information, see the [gha-buildevents README](https://github.com/honeycombio/gha-buildevents/#readme).

name: Trace Workflow

on:
  push:
    branches: ['**']

jobs:

  trace-workflow:
    runs-on: ubuntu-latest
    env:
      BUILDEVENT_FILE: "../buildevents.txt"

    steps:
      - uses: honeycombio/gha-buildevents@v2
        with:
          # Required: a Honeycomb API key - needed to send traces.
          apikey: ${{ secrets.BUILDEVENT_APIKEY }}

          # Required: the Honeycomb dataset to send traces to.
          dataset: buildevents

          # Optional: status, this will be used in the post section and sent
          # as status of the trace. Set on the final job of a workflow to signal for the trace to # end
          # job-status has been deprecated
          status: ${{ job.status }}

          # Optional: this should only be used in combination with matrix builds. Set
          # this to a value uniquely describing each matrix configuration.
          # matrix-key: ${{ matrix.value }}

  # Example 1 - create one span per step in your workflow
      - name: "Custom run step"
        run: |
          # Each Job MUST include unique STEP IDs to ensure each job's spans are properly organized together.
          STEP_ID=$(shuf -i 1-100000 -n 1)
          STEP_START=$(date +%s)

          # Then, you run your command
          sleep 10

          # By default buildevents reports fields from the environment (branch name, repo, build number, etc).
          # You can add context to each step by using the globally set BUILDEVENT_FILE. This file holds
          # arbitrary key=val pairs (multi-line-capable, logfmt style) that are added to all remaining Honeycomb events.
          # Note: entries must be space delimited, so we recommend prepending a space before adding a new field.
          echo " runner-uname=$(uname -a)" >> $BUILDEVENT_FILE

          # Invoke the 'buildevents step' command to send data about this step to Honeycomb. The final parameter
          # in this command is NAME, which is the label applied to this individual trace span. When $STEP_ID is human
          # readable, we recommend setting it as NAME. When $STEP_ID is autogenerated, set a useful NAME (such as the
          # name of your workflow step) as the final parameter of the 'buildevents step' command.
          buildevents step $TRACE_ID $STEP_ID $STEP_START 'custom run step'

  # Example 2 - create multiple spans per step in your workflow
      - name: "Step with multiple sub commands"
        run: |
          # Each Job MUST include unique STEP IDs to ensure each job's spans are properly organized together.
          STEP_ID=sub-commands
          STEP_START=$(date +%s)

          # When you have steps with multiple sub commands, use 'buildevents cmd' to capture details about each
          # sub command. The command invoked must be expressed as a single shell command (e.g. a go test, or a shell
          # script). By default, the command is launched via bash -c using exec. You can specify an alternate shell
          # using the -s/--shell flag, but that shell must support using the -c flag.
          #
          # Syntax: buildevents cmd $TRACE_ID $STEP_ID $NAME -- $CMD
          buildevents cmd $TRACE_ID $STEP_ID 'sleep 5 seconds' -- sleep 5
          buildevents cmd $TRACE_ID $STEP_ID 'sleep 10 seconds' -- sleep 10

          # The command below will appear in the top level of the "sub-commands" step
          sleep 15

          # Invoke the 'buildevents step' command to send data about this step to Honeycomb. Here we reuse $STEP_ID
          # because it is human readable.
          buildevents step $TRACE_ID $STEP_ID $STEP_START $STEP_ID

  # Example 3 - how to capture 3rd party actions or wrap multiple steps into one span
        # run a step to 'start' your trace span
      - name: "Honeycomb: Start JDK setup"
        run: |
          # Each Job MUST include unique STEP IDs to ensure each job's spans are properly organized together.
          # In this example, these environment variables will be used by the finish step, so they must be exported.
          echo "STEP_ID=setup-jdk" >> $GITHUB_ENV
          echo "STEP_START=$(date +%s)" >> $GITHUB_ENV

        # run a 3rd party action in a seperate step
      - name: "Set up JDK"
        uses: actions/setup-java@v3.10.0
        with:
          java-version: 14
          distribution: 'adopt'

        # if you wish to wrap multiple actions into one span for any reason, you can (optionally) add more
        # steps here

        # when done, run buildevents to 'finish' your trace span
      - name: "Honeycomb: Finish JDK setup"
        run: buildevents step $TRACE_ID $STEP_ID $STEP_START $STEP_ID

  # Example 4 - how to add fields into only one span
        # In example 1, you added custom fields that propogate to every subsequent span in your workflow.
        # Some fields may only be needed in a single step.
      - name: "Add span level fields"
        run: |
          # Each Job MUST include unique STEP IDs to ensure each job's spans are properly organized together.
          STEP_ID=add-fields
          STEP_START=$(date +%s)

          # To add fields into only this span, override the BUILDEVENT_FILE in a single step.
          # Note: if you want to use global varaibles, you will also need to capture them in the override file.
          cp $BUILDEVENT_FILE ../add-fields-buildevents_file.txt
          BUILDEVENT_FILE=../add-fields-buildevents_file.txt
          # Entries must be space delimited, so we recommend prepending a space before adding a new field.
          echo " span-specific-field=${GITHUB_STEP_SUMMARY}" >> $BUILDEVENT_FILE

          # Invoke the 'buildevents step' command to send data about this step to Honeycomb.
          buildevents step $TRACE_ID $STEP_ID $STEP_START $STEP_ID

  # Example 5 - Reporting failed steps in your workflow
      - name: "Intentionally failing step"
        run: |
          # Each Job MUST include unique STEP IDs to ensure each job's spans are properly organized together.
          echo "STEP_ID=failing-step" >> $GITHUB_ENV
          echo "STEP_START=$(date +%s)" >> $GITHUB_ENV

          # Intentionally fail this step
          false
          # Note: by default, GitHub Actions will terminate your workflow here: when a failure is encountered.
          # That can be problematic for buildevents data, where you need to invoke the buildevents command in
          # order to generate the trace span. You must configure subsequent steps to run anyway.

      - name: "Honeycomb: Finish failing step"
        run: buildevents step $TRACE_ID $STEP_ID $STEP_START $STEP_ID
        # By always running, this step will execute even if the previous step fails.
        if: always()

      - name: "Will not run"
        run: |
          echo "you will never see me"
          # Due to the previously failing step, this step will never run. This is here for demonstration purposes.

# At the end of your workflow, the gha-buildevents action automatically runs as a post-action that executes the
# 'buildevents build' command, which ends your trace span. You can see the trace generated via ui.honeycomb.io or
# by clicking on the link in the 'Post Run honeycombio/gha-buildevents@v2' step
