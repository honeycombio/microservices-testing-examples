# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build

on:
  push:
    branches: [ '**' ]

jobs:

  build:
    strategy:
      fail-fast: false
      matrix:
        service: [credit-score, special-membership, welcome-member-email]

    runs-on: ubuntu-latest

    env:
      PACT_CLI_IMG: pactfoundation/pact-cli:0.12.3.0
      PACT_BROKER_URL: localhost:9292

    steps:
      # set a timestamp to represent the start of the trace and output it so it can be used in the final job
      - name: Set trace-start
        id: set-trace-start
        run: |
          echo ::set-output name=trace-start::$(date +%s)
        if: strategy.job-index == 0

      - uses: actions/checkout@v3

      - id: honeycomb-setup-recording
        uses: honeycombio/gha-buildevents@v2
        with:
          # Required: a Honeycomb API key - needed to send traces.
          #   must be set in your GitHub repository under Settings > Secrets > Actions
          apikey: ${{ secrets.BUILDEVENTS_APIKEY }}

          # Required: the Honeycomb dataset to send traces to
          dataset: buildevents

          # Optional: this should only be used in combination with matrix builds. Set
          # this to a value uniquely describing each matrix configuration.
          # matrix-key: ${{ matrix.service }}

      - id: start-dependencies
        run: docker-compose -f pact-tools/pact-broker/docker-compose.yml up -d

      - name: "install xpath for reporting"
        run: |
          sudo apt update
          sudo apt install libxml-xpath-perl

      - id: setup-JDK
        uses: actions/setup-java@v3.5.0
        with:
          java-version: 14
          distribution: 'adopt'

      - id: cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - id: build
        run: |
          echo "STEP_ID=build_${{ matrix.service }}" >> $GITHUB_ENV
          echo "STEP_START=$(date +%s)" >> $GITHUB_ENV
          source $GITHUB_ENV

          # build
          buildevents cmd $TRACE_ID $STEP_ID 'build' -- \
            mvn clean verify -pl ${{ matrix.service }}-service -Pcode-coverage -Pstatic-code-analysis

      - name: "Honeycomb: Finalize build"
        if: always()
        env:
          MODULE: ${{ matrix.service }}-service
          OUTCOME: ${{ steps.build.outcome }}
        run: |
          if echo $OUTCOME | grep -wq -e success -e failure; then
            BUILDEVENT_FILE="build_${MODULE}_buildevents.txt"
            echo " status=${OUTCOME}" >> $BUILDEVENT_FILE
            echo " ci.tests.build.completed=$(xpath -q -e 'failsafe-summary/completed/text()'  ${MODULE}/target/failsafe-reports/failsafe-summary.xml)" >> $BUILDEVENT_FILE
            echo " ci.tests.build.errors=$(xpath -q -e 'failsafe-summary/errors/text()'  ${MODULE}/target/failsafe-reports/failsafe-summary.xml)" >> $BUILDEVENT_FILE
            echo " ci.tests.build.failures=$(xpath -q -e 'failsafe-summary/failures/text()'  ${MODULE}/target/failsafe-reports/failsafe-summary.xml)" >> $BUILDEVENT_FILE
            echo " ci.tests.build.skipped=$(xpath -q -e 'failsafe-summary/skipped/text()'  ${MODULE}/target/failsafe-reports/failsafe-summary.xml)" >> $BUILDEVENT_FILE
            buildevents step $TRACE_ID $STEP_ID $STEP_START $STEP_ID
          fi

      - id: pact
        run: |
          echo "STEP_ID=pact_${{ matrix.service }}" >> $GITHUB_ENV
          echo "STEP_START=$(date +%s)" >> $GITHUB_ENV
          source $GITHUB_ENV
          sh ./.github/scripts/${{ matrix.service }}.sh

      - name: "Honeycomb: Finalize pact"
        if: always()
        env:
          MODULE: ${{ matrix.service }}-service
          OUTCOME: ${{ steps.pact.outcome }}
        run: |
          if echo $OUTCOME | grep -wq -e success -e failure; then
            BUILDEVENT_FILE="pact_${MODULE}_buildevents.txt"
            echo " status=${OUTCOME}" >> $BUILDEVENT_FILE
            buildevents step $TRACE_ID $STEP_ID $STEP_START $STEP_ID
          fi

  end-trace:
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ always() }}
    steps:
      - uses: technote-space/workflow-conclusion-action@v3 # this seemed like a nice action to get the workflow conclusion since it's not available as an official github context - in a single job workflow this would just be {{ job.status }}
      - id: honeycomb-setup-recording
        uses: honeycombio/gha-buildevents@v2
        with:
          apikey: ${{ secrets.BUILDEVENTS_APIKEY }}
          dataset: buildevents
          status: ${{ env.WORKFLOW_CONCLUSION }} # now we use status to signal it's time to end the trace
          trace-start: ${{ needs.build.outputs.trace-start}} # we pass the timestamp from job 1 so the trace can be accurately timed