# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build

on:
  push:
    branches: [ '**' ]

jobs:

  build:
    runs-on: ubuntu-latest

    env:
      PACT_CLI_IMG: pactfoundation/pact-cli:0.12.3.0
      PACT_BROKER_URL: localhost:9292

    steps:
      - uses: actions/checkout@v3

      - id: start-dependencies
        run: docker-compose -f pact-tools/pact-broker/docker-compose.yml up -d

      - id: setup-JDK
        uses: actions/setup-java@v3.6.0
        with:
          java-version: 14
          distribution: 'adopt'

      - id: cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - id: build-welcome-member-email
        run: |
          # build
          mvn clean verify -pl welcome-member-email-service -Pcode-coverage -Pstatic-code-analysis

      - id: pact-welcome-member-email
        run: |
          # verify pacts
          ## No pacts to verify
          # create pacts
          mvn verify -pl welcome-member-email-service -Pconsumer-pacts
          docker run --rm --net host -v `pwd`/welcome-member-email-service/target/pacts:/target/pacts ${PACT_CLI_IMG} publish /target/pacts --consumer-app-version `git rev-parse --short HEAD` --tag `git rev-parse --abbrev-ref HEAD` --broker-base-url ${PACT_BROKER_URL} --broker-username=rw_user --broker-password=rw_pass
          # simulate that we run the providers' support pipelines
          ## simulate that there is a prod version of the provider deployed
          docker run --rm --net host ${PACT_CLI_IMG} broker create-version-tag --auto-create-version --pacticipant special-membership-service --version `git rev-parse --short HEAD` --tag prod --broker-base-url ${PACT_BROKER_URL} --broker-username=rw_user --broker-password=rw_pass
          ## verify pacts of welcome member email service that were just published
          mvn verify -pl special-membership-service -Pprovider-pacts -Dpact.verifier.publishResults=true -Dpact.provider.version=`git rev-parse --short HEAD` -Dpactbroker.consumers=welcome-member-email-service -Dpactbroker.tags=`git rev-parse --abbrev-ref HEAD` -Dpactbroker.user=rw_user -Dpactbroker.pass=rw_pass
          # meanwhile, this is happening in the welcome member email service pipeline
          # can-i-deploy
          docker run --rm --net host ${PACT_CLI_IMG} broker can-i-deploy -v --pacticipant welcome-member-email-service --version `git rev-parse --short HEAD` --to prod --broker-base-url ${PACT_BROKER_URL} --broker-username=rw_user --broker-password=rw_pass
          # tag pacts as production
          docker run --rm --net host ${PACT_CLI_IMG} broker create-version-tag --auto-create-version --pacticipant welcome-member-email-service --version `git rev-parse --short HEAD` --tag prod --broker-base-url ${PACT_BROKER_URL} --broker-username=rw_user --broker-password=rw_pass

      - id: build-special-membership
        run: |
          # build
          mvn clean verify -pl special-membership-service -Pcode-coverage -Pstatic-code-analysis

      - id: pact-special-membership
        run: |
          # verify pacts
          mvn verify -pl special-membership-service -Pprovider-pacts -Dpact.verifier.publishResults=true -Dpact.provider.version=`git rev-parse --short HEAD` -Dpactbroker.tags=prod -Dpactbroker.user=rw_user -Dpactbroker.pass=rw_pass
          # create pacts
          mvn verify -pl special-membership-service -Pconsumer-pacts
          docker run --rm --net host -v `pwd`/special-membership-service/target/pacts:/target/pacts ${PACT_CLI_IMG} publish /target/pacts --consumer-app-version `git rev-parse --short HEAD` --tag `git rev-parse --abbrev-ref HEAD` --broker-base-url ${PACT_BROKER_URL} --broker-username=rw_user --broker-password=rw_pass
          # simulate that we run the providers' support pipelines
          ## simulate that there is a prod version of the provider deployed
          docker run --rm --net host ${PACT_CLI_IMG} broker create-version-tag --auto-create-version --pacticipant credit-score-service --version `git rev-parse --short HEAD` --tag prod --broker-base-url ${PACT_BROKER_URL} --broker-username=rw_user --broker-password=rw_pass
          ## verify pacts of special membership service that were just published
          mvn verify -pl credit-score-service -Pprovider-pacts -Dpact.verifier.publishResults=true -Dpact.provider.version=`git rev-parse --short HEAD` -Dpactbroker.consumers=special-membership-service -Dpactbroker.tags=`git rev-parse --abbrev-ref HEAD` -Dpactbroker.user=rw_user -Dpactbroker.pass=rw_pass
          # meanwhile, this is happening in the special membership service pipeline
          # can-i-deploy
          docker run --rm --net host ${PACT_CLI_IMG} broker can-i-deploy -v --pacticipant special-membership-service --version `git rev-parse --short HEAD` --to prod --broker-base-url ${PACT_BROKER_URL} --broker-username=rw_user --broker-password=rw_pass
          # tag pacts as production
          docker run --rm --net host ${PACT_CLI_IMG} broker create-version-tag --auto-create-version --pacticipant special-membership-service --version `git rev-parse --short HEAD` --tag prod --broker-base-url ${PACT_BROKER_URL} --broker-username=rw_user --broker-password=rw_pass

      - id: build-credit-score
        run: |
          # build
          mvn clean verify -pl credit-score-service -Pcode-coverage -Pstatic-code-analysis

      - id: pact-credit-score
        run: |
          # verify pacts
          mvn verify -pl credit-score-service -Pprovider-pacts -Dpact.verifier.publishResults=true -Dpact.provider.version=`git rev-parse --short HEAD` -Dpactbroker.tags=prod -Dpactbroker.user=rw_user -Dpactbroker.pass=rw_pass
          # create pacts
          ## no pacts to create
          # can-i-deploy
          ## no need to run since it doesn't create any pacts
          # tag pacts as production
          docker run --rm --net host ${PACT_CLI_IMG} broker create-version-tag --auto-create-version --pacticipant credit-score-service --version `git rev-parse --short HEAD` --tag prod --broker-base-url ${PACT_BROKER_URL} --broker-username=rw_user --broker-password=rw_pass
