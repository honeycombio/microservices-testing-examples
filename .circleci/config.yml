version: 2.1

orbs:
  buildevents: honeycombio/buildevents@0
  docker: circleci/docker@2
  maven: circleci/maven@1

commands:

  build:
    parameters:
      service:
        type: string

    steps:
      - run: mvn clean verify -pl << parameters.service >> -Pcode-coverage -Pstatic-code-analysis

jobs:

  setup:
    docker:
      - image: cimg/go:1.18

    steps:
      - buildevents/start_trace

  watch:
    docker:
      - image: cimg/go:1.18

    steps:
      - buildevents/watch_build_and_finish

  build:
    machine:
      image: ubuntu-2204:2022.04.2

    parameters:
      service:
        type: string

    steps:
      - checkout

      - build:
          service: << parameters.service >>

  pact-test:
    machine:
      image: ubuntu-2204:2022.04.2

    environment:
      PACT_CLI_IMG: pactfoundation/pact-cli:0.12.3.0
      PACT_BROKER_URL: localhost:9292

    steps:
      - checkout

      - run:
          name: Start-dependencies-with-docker-compose
          command: docker-compose -f pact-tools/pact-broker/docker-compose.yml up
          background: true

      - run:
          name: Pact-build-and-test-welcome-member-email-service
          command: |
            mvn verify -pl welcome-member-email-service -Pconsumer-pacts
            docker run --rm --net host -v `pwd`/welcome-member-email-service/target/pacts:/target/pacts ${PACT_CLI_IMG} publish /target/pacts --consumer-app-version `git rev-parse --short HEAD` --tag `git rev-parse --abbrev-ref HEAD` --broker-base-url ${PACT_BROKER_URL} --broker-username=rw_user --broker-password=rw_pass
            # simulate that we run the providers' support pipelines
            ## simulate that there is a prod version of the provider deployed
            docker run --rm --net host ${PACT_CLI_IMG} broker create-version-tag --auto-create-version --pacticipant special-membership-service --version `git rev-parse --short HEAD` --tag prod --broker-base-url ${PACT_BROKER_URL} --broker-username=rw_user --broker-password=rw_pass
            ## verify pacts of welcome member email service that were just published
            mvn verify -pl special-membership-service -Pprovider-pacts -Dpact.verifier.publishResults=true -Dpact.provider.version=`git rev-parse --short HEAD` -Dpactbroker.consumers=welcome-member-email-service -Dpactbroker.tags=`git rev-parse --abbrev-ref HEAD` -Dpactbroker.user=rw_user -Dpactbroker.pass=rw_pass
            # meanwhile, this is happening in the welcome member email service pipeline
            # can-i-deploy
            docker run --rm --net host ${PACT_CLI_IMG} broker can-i-deploy -v --pacticipant welcome-member-email-service --version `git rev-parse --short HEAD` --to prod --broker-base-url ${PACT_BROKER_URL} --broker-username=rw_user --broker-password=rw_pass
            # tag pacts as production
            docker run --rm --net host ${PACT_CLI_IMG} broker create-version-tag --auto-create-version --pacticipant welcome-member-email-service --version `git rev-parse --short HEAD` --tag prod --broker-base-url ${PACT_BROKER_URL} --broker-username=rw_user --broker-password=rw_pass

      - run:
          name: Pact-build-and-test-special-membership-service
          command: |
            mvn verify -pl special-membership-service -Pprovider-pacts -Dpact.verifier.publishResults=true -Dpact.provider.version=`git rev-parse --short HEAD` -Dpactbroker.tags=prod -Dpactbroker.user=rw_user -Dpactbroker.pass=rw_pass
            # create pacts
            mvn verify -pl special-membership-service -Pconsumer-pacts
            docker run --rm --net host -v `pwd`/special-membership-service/target/pacts:/target/pacts ${PACT_CLI_IMG} publish /target/pacts --consumer-app-version `git rev-parse --short HEAD` --tag `git rev-parse --abbrev-ref HEAD` --broker-base-url ${PACT_BROKER_URL} --broker-username=rw_user --broker-password=rw_pass
            # simulate that we run the providers' support pipelines
            ## simulate that there is a prod version of the provider deployed
            docker run --rm --net host ${PACT_CLI_IMG} broker create-version-tag --auto-create-version --pacticipant credit-score-service --version `git rev-parse --short HEAD` --tag prod --broker-base-url ${PACT_BROKER_URL} --broker-username=rw_user --broker-password=rw_pass
            ## verify pacts of special membership service that were just published
            mvn verify -pl credit-score-service -Pprovider-pacts -Dpact.verifier.publishResults=true -Dpact.provider.version=`git rev-parse --short HEAD` -Dpactbroker.consumers=special-membership-service -Dpactbroker.tags=`git rev-parse --abbrev-ref HEAD` -Dpactbroker.user=rw_user -Dpactbroker.pass=rw_pass
            # meanwhile, this is happening in the special membership service pipeline
            # can-i-deploy
            docker run --rm --net host ${PACT_CLI_IMG} broker can-i-deploy -v --pacticipant special-membership-service --version `git rev-parse --short HEAD` --to prod --broker-base-url ${PACT_BROKER_URL} --broker-username=rw_user --broker-password=rw_pass
            # tag pacts as production
            docker run --rm --net host ${PACT_CLI_IMG} broker create-version-tag --auto-create-version --pacticipant special-membership-service --version `git rev-parse --short HEAD` --tag prod --broker-base-url ${PACT_BROKER_URL} --broker-username=rw_user --broker-password=rw_pass

      - run:
          name: Pact-build-and-test-credit-score-service
          command: |
            mvn verify -pl credit-score-service -Pprovider-pacts -Dpact.verifier.publishResults=true -Dpact.provider.version=`git rev-parse --short HEAD` -Dpactbroker.tags=prod -Dpactbroker.user=rw_user -Dpactbroker.pass=rw_pass
            # create pacts
            ## no pacts to create
            # can-i-deploy
            ## no need to run since it doesn't create any pacts
            # tag pacts as production
            docker run --rm --net host ${PACT_CLI_IMG} broker create-version-tag --auto-create-version --pacticipant credit-score-service --version `git rev-parse --short HEAD` --tag prod --broker-base-url ${PACT_BROKER_URL} --broker-username=rw_user --broker-password=rw_pass


workflows:
  build_and_test:
    jobs:
      - setup
      - watch:
          requires:
            - setup
      - build:
          matrix:
            parameters:
              service: [
                  "credit-score-service",
                  "special-membership-service",
                  "welcome-member-email-service",
              ]
      - pact-test:
          requires:
            - build
